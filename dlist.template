/*
Josh Mencsik
24 March 2020
The implementation of the dlist class
*/

#include<iostream>

using namespace std;



template<class T>
dList<T>::dList(const dList<T>& cp) {
    if (cp.head == NULL) {
        head = NULL;
        tail = NULL;
    }
    else {
        dnode<T>* cursor = cp.head;
        head = tail = new dnode<T>(cursor -> data());
        cursor = cursor -> next();
        while (cursor != NULL) {
            tail -> setNext(new dnode<T>(cursor -> data(), tail));
            tail = tail -> next();
            cursor = cursor -> next();
        }
        nodecount = cp.nodecount;
    }
}


template<class T>
dList<T>::~dList() {
    dnode<T>* temp;
    while (head != NULL) {
        temp = head;
        head = head -> next();
        delete temp;
    }
    tail = NULL;
}


template<class T>
dList<T> dList<T>::operator =(const dList<T> cp) {
    if (&cp == this) {
        return *this;
    }
    else if (cp.head == NULL) {
        dnode<T>* cursor = head;
        while (cursor != NULL) {
            head = cursor -> next();
            delete cursor;
            cursor = head;
        }
        head = tail = NULL;
        nodecount = 0;
    }
    else {
        //have to do some special cases just in case the two lists aren't the same size

        //if they actually are the same size
        if (cp.nodecount == nodecount) {
            dnode<T>* cursor = head;
            dnode<T>* cpCur = cp.head;
            while (cursor != NULL) {
                cursor -> setData(cpCur -> data());
                cpCur = cpCur -> next();
                cursor = cursor -> next();
            }
        }

        //if the second is smaller
        else if (cp.nodecount < nodecount) {

            while (nodecount != cp.nodecount) {
                tail = tail -> previous();
                delete tail -> next();
                nodecount--;
            }

            tail -> setNext(NULL);
            dnode<T>* cursor = head;
            dnode<T>* cpCur = cp.head;
            while (cursor != NULL) {
                cursor -> setData(cpCur -> data());
                cpCur = cpCur -> next();
                cursor = cursor -> next();
            }
        }

        //if the second is larger
        else if (cp.nodecount > nodecount) {
            dnode<T>* cursor = head;
            dnode<T>* cpCur = cp.head;
            while (cursor != NULL) {
                cursor -> setData(cpCur -> data());
                cpCur = cpCur -> next();
                cursor = cursor -> next();
            }
            while (cpCur != NULL) {
                tail -> setNext(new dnode<T>(cpCur -> data(), tail));
                tail = tail -> next();
                cpCur = cpCur -> next();
            }
            nodecount = cp.nodecount;
        }
    }
    //end of all if-elses
    return *this;
}

//all of the insert and remove functions check for multiple cases in order to keep the list in order
//regardless of the iterator's position when the function is run
template <class T>
void dList<T>::front_insert (const T& item) {
    if (head == NULL) {
        head = tail = new dnode<T> (item);
    }
    else {
        head = new dnode<T>(item, NULL, head);
        head -> next() -> setPrevious(head);
    }
    nodecount++;
}

template <class T>
void dList<T>::rear_insert (const T& item) {
    if (head == NULL) {
        head = tail = new dnode<T> (item);
    }
    else {
        tail -> setNext(new dnode<T>(item,tail));
        tail = tail -> next();
    }
    nodecount++;
}

template <class T>
void dList<T>::front_remove() {
    if (head == NULL) {
        return;
    }
    else if (head == tail) {
        delete head;
        head = tail = NULL;
    }
    else {
        dnode<T>* temp = head;
        head = head -> next();
        head -> setPrevious(NULL);
        delete temp;
    }
    nodecount--;
}

template <class T>
void dList<T>::rear_remove() {
    if (head == NULL) {
        return;
    }
    else if (head == tail) {
        delete head;
        head = tail = NULL;
    }
    else {
        dnode<T>* temp = tail;
        tail = tail -> previous();
        tail -> setNext(NULL);
        delete temp;
    }
    nodecount--;
}

template <class T>
void dList<T>::show() const {
    if (head == NULL) {
        cout << "Empty List" << endl;
        return;
    }

    dnode<T>* cursor = head;
    while (cursor != NULL) {
        cout << cursor -> data() << endl;
        cursor = cursor -> next();
    }
}

template <class T>
void dList<T>::reverse_show() const {
    if (head == NULL) {
        cout << "Empty List" << endl;
        return;
    }

    dnode<T>* cursor = tail;
    while (cursor != NULL) {
        cout << cursor -> data() << endl;
        cursor = cursor -> previous();
    }
}

//similar to the other functions, but uses the iterators to insert and remove at specific positions
template <class T>
void dList<T>::insert_before(iterator position, T item) {
    if (head == NULL) {
        head = tail = new dnode<T>(item);
    }
    else if (position == begin()) {
        head = new dnode<T>(item, NULL, head);
        position.spot -> setPrevious(head);
        position.spot = position.spot -> previous();
    }
    else {
        dnode<T>* temp = position.spot -> previous();
        temp -> setNext(new dnode<T>(item, temp, position.spot));
        temp = temp -> next();
        position.spot -> setPrevious(temp);
    }
    nodecount++;
}

template <class T>
void dList<T>::insert_after(iterator position, T item) {
    if (head == NULL) {
        head = tail = new dnode<T>(item);
    }
    else if (position.spot == tail) {
        tail -> setNext(new dnode<T> (item, tail)); 
        tail = tail -> next();
    }
    else {
        dnode<T>* temp = position.spot -> next();
        position.spot -> setNext(new dnode<T>(item, position.spot, temp));
        temp -> setPrevious(position.spot -> next());
    }
    nodecount++;
}

template <class T>
void dList<T>::remove(iterator position) {
    dnode<T>* cursor = head;
    while (cursor != position.spot) {
        cursor = cursor -> next();
    }
    position--;
    position.spot -> setNext(cursor -> next());
    cursor -> next() -> setPrevious(position.spot);
    delete cursor;
}